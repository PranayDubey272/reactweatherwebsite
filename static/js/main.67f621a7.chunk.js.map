{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["api","dateBuilder","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","App","useState","Query","setQuery","weather","setweather","className","main","temp","type","placeholder","onChange","e","target","value","onKeyPress","evt","key","fetch","then","res","json","result","console","log","name","sys","country","Date","Math","round","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gMAGMA,EACA,mCADAA,EAEE,2CAMFC,EAAc,SAACC,GACnB,IAGIC,EAFM,CAAC,SAAS,SAAS,UAAU,YAAY,WAAW,SAAS,YAExDD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EALO,CAAC,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO,MAAM,MAAM,OAAO,MAAM,OAKvDL,EAAEM,YACjBC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,IAyDrBE,MAvDf,WACE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KAcA,OACE,qBAAKC,UACqB,oBAAhBF,EAAQG,MACXH,EAAQG,KAAKC,KAAO,GACvB,WACG,MAJP,SAME,iCACE,qBAAKF,UAAU,aAAf,SACE,uBACEG,KAAK,OACLH,UAAU,aACVI,YAAc,YACdC,SAAU,SAAAC,GAAC,OAAIT,EAASS,EAAEC,OAAOC,QACjCA,MAAOZ,EACPa,WA3BK,SAAAC,GACE,UAAZA,EAAIC,KACLC,MAAM,GAAD,OAAI7B,EAAJ,qBAAyBa,EAAzB,+BAAqDb,IACvD8B,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJjB,EAAWiB,GACXnB,EAAS,IACToB,QAAQC,IAAIF,WAuBW,oBAAhBlB,EAAQG,KACjB,gCACA,sBAAKD,UAAU,eAAf,UACE,sBAAKA,UAAU,WAAf,UAA2BF,EAAQqB,KAAnC,IAA0CrB,EAAQsB,IAAIC,WACtD,qBAAKrB,UAAU,OAAf,SAAuBhB,EAAY,IAAIsC,WAEzC,sBAAKtB,UAAU,cAAf,UACE,sBAAKA,UAAU,OAAf,UACKuB,KAAKC,MAAM1B,EAAQG,KAAKC,MAD7B,YAGA,qBAAKF,UAAU,UAAf,SACGF,EAAQA,QAAQ,GAAGG,aAIrB,SC3DIwB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.67f621a7.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nconst api = {\n  key:\"d9aa9effc317a85896152d8632673e87\",\n  base: \"https://api.openweathermap.org/data/2.5/\"\n}\n\n\n\n\nconst dateBuilder = (d) => {\n  let months=[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"June\",\"Jul\",\"Aug\",\"Sept\",\"Nov\",\"Dec\"];\n  let days =[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"];\n\n  let day = days[d.getDay()];\n  let date = d.getDate();\n  let month = months[d.getMonth()];\n  let year = d.getFullYear();\n\n  return `${day} ${date} ${month} ${year}`\n}\nfunction App() {\n  const [Query, setQuery] = useState('');\n  const [weather, setweather] = useState({});\n\n  const search = evt =>{\n    if(evt.key === \"Enter\"){\n      fetch(`${api.base}weather?q=${Query}&units=metric&APPID=${api.key}`)\n        .then(res => res.json())\n        .then(result =>{\n          setweather(result);\n          setQuery(''); \n          console.log(result);\n        }); \n    }\n  }\n\n  return (\n    <div className={\n      (typeof weather.main != 'undefined') \n        ?((weather.main.temp > 20 ) ? \n        'app warm' :'app' )\n          :'app'}>\n\n      <main>\n        <div className=\"search-box\">\n          <input \n            type=\"text\"\n            className=\"search-bar\"\n            placeholder = \"Search...\"\n            onChange={e => setQuery(e.target.value)}\n            value={Query}\n            onKeyPress= {search}\n            />\n        </div>\n        {(typeof weather.main != \"undefined\") ? (\n        <div>\n        <div className=\"location-box\">\n          <div className=\"location\">{weather.name},{weather.sys.country}</div>\n          <div className=\"date\">{dateBuilder(new Date())}</div>\n        </div>\n        <div className=\"weather-box\">\n          <div className=\"temp\">\n              {Math.round(weather.main.temp)} Â°C\n          </div>\n          <div className=\"weather\">\n            {weather.weather[0].main}\n          </div>\n        </div>\n        </div>\n        ):('')}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}